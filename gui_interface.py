"""
Interface graphique pour l'optimisation du sac √† dos par colonie de fourmis
Utilise tkinter pour une interface compl√®te et intuitive
"""

import tkinter as tk
from tkinter import ttk, filedialog, messagebox, scrolledtext
import threading
import queue
import json
import os
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
from matplotlib.figure import Figure
import numpy as np
from datetime import datetime
import csv
import time

# Configuration par d√©faut
class DefaultConfig:
    ALPHA = 1.0
    BETA = 2.0
    EVAPORATION = 0.5
    NUM_ANTS = 20
    NUM_ITERATIONS = 100
    KNAPSACK_CAPACITY = 50
    DATA_FILE = "items.csv"

config = DefaultConfig()

class ACOKnapsackGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("üêú Optimisation Sac √† Dos - Colonie de Fourmis")
        self.root.geometry("1200x800")
        self.root.minsize(1000, 600)
        
        # Variables
        self.problem = None
        self.colony = None
        self.optimizer = None
        self.is_running = False
        self.results_queue = queue.Queue()
        self.best_solutions = []
        self.current_thread = None
        
        # Configuration des param√®tres
        self.params = {
            'alpha': tk.DoubleVar(value=config.ALPHA),
            'beta': tk.DoubleVar(value=config.BETA),
            'evaporation': tk.DoubleVar(value=config.EVAPORATION),
            'num_ants': tk.IntVar(value=config.NUM_ANTS),
            'iterations': tk.IntVar(value=config.NUM_ITERATIONS),
            'capacity': tk.IntVar(value=config.KNAPSACK_CAPACITY)
        }
        
        # Interface
        self.setup_ui()
        self.setup_menu()
        
        # Thread monitoring
        self.root.after(100, self.check_results_queue)

    def setup_menu(self):
        """Configure le menu principal"""
        menubar = tk.Menu(self.root)
        self.root.config(menu=menubar)
        
        # Menu Fichier
        file_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="Fichier", menu=file_menu)
        file_menu.add_command(label="Charger donn√©es CSV", command=self.load_data_file)
        file_menu.add_separator()
        file_menu.add_command(label="Sauvegarder configuration", command=self.save_config)
        file_menu.add_command(label="Charger configuration", command=self.load_config)
        file_menu.add_separator()
        file_menu.add_command(label="Quitter", command=self.root.quit)
        
        # Menu Optimisation
        optim_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="Optimisation", menu=optim_menu)
        optim_menu.add_command(label="Optimiser param√®tres", command=self.optimize_parameters)
        optim_menu.add_command(label="R√©initialiser param√®tres", command=self.reset_parameters)
        
        # Menu Aide
        help_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="Aide", menu=help_menu)
        help_menu.add_command(label="√Ä propos", command=self.show_about)

    def setup_ui(self):
        """Configure l'interface utilisateur"""
        # Frame principal
        main_frame = ttk.Frame(self.root, padding="10")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # Configuration des poids des colonnes et lignes
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        main_frame.columnconfigure(1, weight=1)
        main_frame.rowconfigure(2, weight=1)
        
        # Section 1: Chargement des donn√©es
        self.setup_data_section(main_frame)
        
        # Section 2: Configuration des param√®tres
        self.setup_params_section(main_frame)
        
        # Section 3: R√©sultats et visualisation
        self.setup_results_section(main_frame)
        
        # Section 4: Contr√¥les
        self.setup_controls_section(main_frame)

    def setup_data_section(self, parent):
        """Section pour le chargement des donn√©es"""
        data_frame = ttk.LabelFrame(parent, text="üìÇ Donn√©es du Probl√®me", padding="10")
        data_frame.grid(row=0, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(0, 10))
        data_frame.columnconfigure(1, weight=1)
        
        # Chargement de fichier
        ttk.Label(data_frame, text="Fichier CSV:").grid(row=0, column=0, sticky=tk.W, padx=(0, 10))
        self.file_path_var = tk.StringVar(value=config.DATA_FILE)
        ttk.Entry(data_frame, textvariable=self.file_path_var, state="readonly").grid(
            row=0, column=1, sticky=(tk.W, tk.E), padx=(0, 10)
        )
        ttk.Button(data_frame, text="Parcourir", command=self.browse_file).grid(row=0, column=2)
        
        # Capacit√©
        ttk.Label(data_frame, text="Capacit√© du sac:").grid(row=1, column=0, sticky=tk.W, padx=(0, 10), pady=(10, 0))
        capacity_spinbox = ttk.Spinbox(data_frame, from_=1, to=1000, textvariable=self.params['capacity'], width=10)
        capacity_spinbox.grid(row=1, column=1, sticky=tk.W, pady=(10, 0))
        
        # Informations sur le probl√®me
        self.problem_info_var = tk.StringVar(value="Aucun fichier charg√©")
        ttk.Label(data_frame, textvariable=self.problem_info_var, foreground="blue").grid(
            row=2, column=0, columnspan=3, sticky=tk.W, pady=(10, 0)
        )
        
        # Chargement initial
        self.load_problem()

    def setup_params_section(self, parent):
        """Section pour la configuration des param√®tres"""
        params_frame = ttk.LabelFrame(parent, text="‚öôÔ∏è Param√®tres de l'Algorithme", padding="10")
        params_frame.grid(row=1, column=0, sticky=(tk.W, tk.E, tk.N), padx=(0, 5), pady=(0, 10))
        
        # Param√®tres ACO
        row = 0
        param_configs = [
            ('Alpha (Œ±)', 'alpha', 0.1, 5.0, 0.1),
            ('B√™ta (Œ≤)', 'beta', 0.1, 5.0, 0.1),
            ('√âvaporation', 'evaporation', 0.1, 0.9, 0.05),
            ('Nombre de fourmis', 'num_ants', 5, 100, 1),
            ('It√©rations', 'iterations', 10, 500, 10)
        ]
        
        for label_text, param_name, min_val, max_val, increment in param_configs:
            ttk.Label(params_frame, text=f"{label_text}:").grid(row=row, column=0, sticky=tk.W, pady=2)
            
            if param_name in ['num_ants', 'iterations']:
                spinbox = ttk.Spinbox(
                    params_frame, 
                    from_=min_val, 
                    to=max_val, 
                    increment=increment,
                    textvariable=self.params[param_name], 
                    width=10
                )
            else:
                spinbox = ttk.Spinbox(
                    params_frame, 
                    from_=min_val, 
                    to=max_val, 
                    increment=increment,
                    textvariable=self.params[param_name], 
                    width=10,
                    format="%.2f"
                )
            
            spinbox.grid(row=row, column=1, sticky=tk.W, padx=(10, 0), pady=2)
            row += 1
        
        # Boutons de configuration pr√©d√©finie
        ttk.Label(params_frame, text="Configurations:").grid(row=row, column=0, sticky=tk.W, pady=(10, 2))
        config_frame = ttk.Frame(params_frame)
        config_frame.grid(row=row+1, column=0, columnspan=2, sticky=tk.W, pady=2)
        
        ttk.Button(config_frame, text="Exploitation", command=lambda: self.apply_preset('exploitation')).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(config_frame, text="Exploration", command=lambda: self.apply_preset('exploration')).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(config_frame, text="√âquilibr√©", command=lambda: self.apply_preset('equilibre')).pack(side=tk.LEFT)

    def setup_results_section(self, parent):
        """Section pour l'affichage des r√©sultats"""
        results_frame = ttk.LabelFrame(parent, text="üìä R√©sultats et Visualisation", padding="10")
        results_frame.grid(row=1, column=1, rowspan=2, sticky=(tk.W, tk.E, tk.N, tk.S), padx=(5, 0))
        results_frame.columnconfigure(0, weight=1)
        results_frame.rowconfigure(1, weight=1)
        
        # Notebook pour les onglets
        self.notebook = ttk.Notebook(results_frame)
        self.notebook.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S), pady=(0, 10))
        
        # Onglet R√©sultats texte
        self.setup_text_results_tab()
        
        # Onglet Graphiques
        self.setup_graphs_tab()
        
        # Onglet Comparaisons
        self.setup_comparison_tab()

    def setup_text_results_tab(self):
        """Onglet pour les r√©sultats textuels"""
        text_frame = ttk.Frame(self.notebook)
        self.notebook.add(text_frame, text="üìù R√©sultats")
        
        text_frame.columnconfigure(0, weight=1)
        text_frame.rowconfigure(0, weight=1)
        
        self.results_text = scrolledtext.ScrolledText(text_frame, wrap=tk.WORD, height=20)
        self.results_text.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # Boutons d'action
        text_buttons_frame = ttk.Frame(text_frame)
        text_buttons_frame.grid(row=1, column=0, sticky=tk.E, pady=(10, 0))
        
        ttk.Button(text_buttons_frame, text="Effacer", command=self.clear_results).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(text_buttons_frame, text="Sauvegarder", command=self.save_results).pack(side=tk.LEFT)

    def setup_graphs_tab(self):
        """Onglet pour les graphiques"""
        graph_frame = ttk.Frame(self.notebook)
        self.notebook.add(graph_frame, text="üìà Graphiques")
        
        graph_frame.columnconfigure(0, weight=1)
        graph_frame.rowconfigure(0, weight=1)
        
        # Figure matplotlib
        self.figure = Figure(figsize=(8, 6), dpi=100)
        self.canvas = FigureCanvasTkAgg(self.figure, graph_frame)
        self.canvas.get_tk_widget().grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # Toolbar matplotlib
        toolbar_frame = ttk.Frame(graph_frame)
        toolbar_frame.grid(row=1, column=0, sticky=tk.W)
        
        try:
            from matplotlib.backends.backend_tkagg import NavigationToolbar2Tk
            toolbar = NavigationToolbar2Tk(self.canvas, toolbar_frame)
            toolbar.update()
        except ImportError:
            pass

    def setup_comparison_tab(self):
        """Onglet pour les comparaisons"""
        comp_frame = ttk.Frame(self.notebook)
        self.notebook.add(comp_frame, text="‚öñÔ∏è Comparaisons")
        
        comp_frame.columnconfigure(0, weight=1)
        comp_frame.rowconfigure(0, weight=1)
        
        self.comparison_text = scrolledtext.ScrolledText(comp_frame, wrap=tk.WORD, height=20)
        self.comparison_text.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))

    def setup_controls_section(self, parent):
        """Section pour les contr√¥les"""
        controls_frame = ttk.LabelFrame(parent, text="üéÆ Contr√¥les", padding="10")
        controls_frame.grid(row=2, column=0, sticky=(tk.W, tk.E), padx=(0, 5))
        
        # Boutons principaux
        buttons_frame = ttk.Frame(controls_frame)
        buttons_frame.pack(fill=tk.X)
        
        self.run_button = ttk.Button(buttons_frame, text="üöÄ Lancer ACO", command=self.run_aco)
        self.run_button.pack(side=tk.LEFT, padx=(0, 10))
        
        self.stop_button = ttk.Button(buttons_frame, text="‚èπÔ∏è Arr√™ter", command=self.stop_aco, state="disabled")
        self.stop_button.pack(side=tk.LEFT, padx=(0, 10))
        
        ttk.Button(buttons_frame, text="üîß Optimiser Param√®tres", command=self.optimize_parameters).pack(side=tk.LEFT, padx=(0, 10))
        
        ttk.Button(buttons_frame, text="üìä Solution Gloutonne", command=self.run_greedy).pack(side=tk.LEFT)
        
        # Barre de progression
        self.progress_var = tk.StringVar(value="Pr√™t")
        ttk.Label(controls_frame, textvariable=self.progress_var).pack(anchor=tk.W, pady=(10, 5))
        
        self.progress_bar = ttk.Progressbar(controls_frame, mode='indeterminate')
        self.progress_bar.pack(fill=tk.X)

    def browse_file(self):
        """Ouvre un dialogue pour s√©lectionner un fichier de donn√©es"""
        filename = filedialog.askopenfilename(
            title="S√©lectionner un fichier de donn√©es",
            filetypes=[("CSV files", "*.csv"), ("Tous les fichiers", "*.*")]
        )
        if filename:
            self.file_path_var.set(filename)
            self.load_problem()

    def load_data_file(self):
        """Alias pour browse_file pour le menu"""
        self.browse_file()

    def load_problem(self):
        """Charge le probl√®me depuis le fichier CSV"""
        try:
            file_path = self.file_path_var.get()
            if not os.path.exists(file_path):
                # Cr√©er un fichier d'exemple si n'existe pas
                self.create_example_data(file_path)
            
            # Lire le fichier CSV
            items = []
            with open(file_path, 'r', encoding='utf-8') as file:
                reader = csv.DictReader(file)
                for row in reader:
                    items.append({
                        'name': row.get('name', f'Item{len(items)+1}'),
                        'weight': float(row.get('weight', 1)),
                        'value': float(row.get('value', 1))
                    })
            
            if items:
                self.problem = {
                    'items': items,
                    'capacity': self.params['capacity'].get()
                }
                
                total_weight = sum(item['weight'] for item in items)
                total_value = sum(item['value'] for item in items)
                
                info_text = f"‚úÖ {len(items)} objets charg√©s | Poids total: {total_weight:.1f} | Valeur totale: {total_value:.1f}"
                self.problem_info_var.set(info_text)
            else:
                raise ValueError("Aucun objet trouv√© dans le fichier")
                
        except Exception as e:
            self.problem_info_var.set(f"‚ùå Erreur: {str(e)}")
            messagebox.showerror("Erreur", f"Impossible de charger le fichier:\n{str(e)}")

    def create_example_data(self, file_path):
        """Cr√©e un fichier d'exemple"""
        example_items = [
            {'name': 'Ordinateur portable', 'weight': 2.5, 'value': 1000},
            {'name': 'Livre', 'weight': 0.5, 'value': 15},
            {'name': 'T√©l√©phone', 'weight': 0.2, 'value': 500},
            {'name': 'Appareil photo', 'weight': 1.0, 'value': 300},
            {'name': 'V√™tements', 'weight': 3.0, 'value': 100},
            {'name': 'Trousse m√©dicale', 'weight': 1.5, 'value': 200},
            {'name': 'Nourriture', 'weight': 2.0, 'value': 50},
            {'name': 'Eau', 'weight': 4.0, 'value': 25},
            {'name': 'Lampe de poche', 'weight': 0.3, 'value': 30},
            {'name': 'Chargeur portable', 'weight': 0.4, 'value': 80}
        ]
        
        with open(file_path, 'w', newline='', encoding='utf-8') as file:
            writer = csv.DictWriter(file, fieldnames=['name', 'weight', 'value'])
            writer.writeheader()
            writer.writerows(example_items)

    def apply_preset(self, preset_type):
        """Applique une configuration pr√©d√©finie"""
        presets = {
            'exploitation': {'alpha': 2.0, 'beta': 1.0, 'evaporation': 0.3},
            'exploration': {'alpha': 0.5, 'beta': 3.0, 'evaporation': 0.7},
            'equilibre': {'alpha': 1.0, 'beta': 2.0, 'evaporation': 0.5}
        }
        
        if preset_type in presets:
            for param, value in presets[preset_type].items():
                self.params[param].set(value)

    def run_aco(self):
        """Lance l'optimisation ACO"""
        if not self.problem:
            messagebox.showwarning("Attention", "Veuillez d'abord charger un fichier de donn√©es")
            return
        
        if self.is_running:
            return
        
        self.is_running = True
        self.run_button.config(state="disabled")
        self.stop_button.config(state="normal")
        self.progress_bar.start()
        self.progress_var.set("Optimisation en cours...")
        
        # Lancer l'ACO dans un thread s√©par√©
        self.current_thread = threading.Thread(target=self._aco_worker)
        self.current_thread.start()

    def _aco_worker(self):
        """Worker thread pour l'ACO"""
        try:
            # Simulation d'algorithme ACO
            items = self.problem['items']
            capacity = self.params['capacity'].get()
            num_iterations = self.params['iterations'].get()
            num_ants = self.params['num_ants'].get()
            
            best_value = 0
            best_solution = []
            convergence_data = []
            
            for iteration in range(num_iterations):
                if not self.is_running:
                    break
                
                # Simulation d'une it√©ration ACO
                iteration_best = self._simulate_aco_iteration(items, capacity, num_ants)
                
                if iteration_best['value'] > best_value:
                    best_value = iteration_best['value']
                    best_solution = iteration_best['solution']
                
                convergence_data.append({
                    'iteration': iteration + 1,
                    'best_value': best_value,
                    'current_value': iteration_best['value']
                })
                
                # Mise √† jour du progr√®s
                progress = (iteration + 1) / num_iterations * 100
                self.results_queue.put({
                    'type': 'progress',
                    'progress': progress,
                    'iteration': iteration + 1,
                    'best_value': best_value
                })
                
                time.sleep(0.01)  # Simulation du temps de calcul
            
            # R√©sultats finaux
            self.results_queue.put({
                'type': 'result',
                'best_solution': best_solution,
                'best_value': best_value,
                'convergence_data': convergence_data
            })
            
        except Exception as e:
            self.results_queue.put({
                'type': 'error',
                'message': str(e)
            })

    def _simulate_aco_iteration(self, items, capacity, num_ants):
        """Simule une it√©ration de l'ACO"""
        best_ant_value = 0
        best_ant_solution = []
        
        for ant in range(num_ants):
            # S√©lection al√©atoire d'objets bas√©e sur ratio valeur/poids
            solution = []
            current_weight = 0
            current_value = 0
            
            # Trier les objets par ratio valeur/poids
            sorted_items = sorted(enumerate(items), 
                                key=lambda x: x[1]['value'] / x[1]['weight'], 
                                reverse=True)
            
            for idx, item in sorted_items:
                if current_weight + item['weight'] <= capacity:
                    if np.random.random() > 0.3:  # Probabilit√© de s√©lection
                        solution.append(idx)
                        current_weight += item['weight']
                        current_value += item['value']
            
            if current_value > best_ant_value:
                best_ant_value = current_value
                best_ant_solution = solution
        
        return {'solution': best_ant_solution, 'value': best_ant_value}

    def stop_aco(self):
        """Arr√™te l'optimisation ACO"""
        self.is_running = False
        self.run_button.config(state="normal")
        self.stop_button.config(state="disabled")
        self.progress_bar.stop()
        self.progress_var.set("Arr√™t√©")

    def check_results_queue(self):
        """V√©rifie la queue des r√©sultats"""
        try:
            while True:
                result = self.results_queue.get_nowait()
                
                if result['type'] == 'progress':
                    self.progress_var.set(f"It√©ration {result['iteration']} - Meilleure valeur: {result['best_value']:.1f}")
                
                elif result['type'] == 'result':
                    self._display_results(result)
                    self.stop_aco()
                
                elif result['type'] == 'error':
                    messagebox.showerror("Erreur", result['message'])
                    self.stop_aco()
                    
        except queue.Empty:
            pass
        
        # Programmer la prochaine v√©rification
        self.root.after(100, self.check_results_queue)

    def _display_results(self, result):
        """Affiche les r√©sultats de l'optimisation"""
        best_solution = result['best_solution']
        best_value = result['best_value']
        convergence_data = result['convergence_data']
        
        # Texte des r√©sultats
        results_text = f"""
üéØ R√âSULTATS DE L'OPTIMISATION ACO
{'='*50}

Param√®tres utilis√©s:
‚Ä¢ Alpha (Œ±): {self.params['alpha'].get():.2f}
‚Ä¢ B√™ta (Œ≤): {self.params['beta'].get():.2f}
‚Ä¢ √âvaporation: {self.params['evaporation'].get():.2f}
‚Ä¢ Nombre de fourmis: {self.params['num_ants'].get()}
‚Ä¢ It√©rations: {self.params['iterations'].get()}
‚Ä¢ Capacit√© du sac: {self.params['capacity'].get()}

Meilleure solution trouv√©e:
‚Ä¢ Valeur totale: {best_value:.2f}
‚Ä¢ Nombre d'objets: {len(best_solution)}

Objets s√©lectionn√©s:
"""
        
        total_weight = 0
        for idx in best_solution:
            item = self.problem['items'][idx]
            results_text += f"‚Ä¢ {item['name']} (Poids: {item['weight']:.1f}, Valeur: {item['value']:.1f})\n"
            total_weight += item['weight']
        
        results_text += f"\nPoids total utilis√©: {total_weight:.1f}/{self.params['capacity'].get()}\n"
        results_text += f"Efficacit√©: {total_weight/self.params['capacity'].get()*100:.1f}%\n"
        results_text += f"\nTemps d'ex√©cution: {datetime.now().strftime('%H:%M:%S')}\n"
        
        self.results_text.delete(1.0, tk.END)
        self.results_text.insert(tk.END, results_text)
        
        # Graphique de convergence
        self._plot_convergence(convergence_data)

    def _plot_convergence(self, convergence_data):
        """Affiche le graphique de convergence"""
        self.figure.clear()
        ax = self.figure.add_subplot(111)
        
        iterations = [d['iteration'] for d in convergence_data]
        best_values = [d['best_value'] for d in convergence_data]
        current_values = [d['current_value'] for d in convergence_data]
        
        ax.plot(iterations, best_values, 'b-', label='Meilleure solution', linewidth=2)
        ax.plot(iterations, current_values, 'r-', alpha=0.6, label='Solution courante')
        
        ax.set_xlabel('It√©ration')
        ax.set_ylabel('Valeur de la solution')
        ax.set_title('Convergence de l\'algorithme ACO')
        ax.legend()
        ax.grid(True, alpha=0.3)
        
        self.canvas.draw()

    def run_greedy(self):
        """Ex√©cute l'algorithme glouton pour comparaison"""
        if not self.problem:
            messagebox.showwarning("Attention", "Veuillez d'abord charger un fichier de donn√©es")
            return
        
        items = self.problem['items']
        capacity = self.params['capacity'].get()
        
        # Algorithme glouton bas√© sur le ratio valeur/poids
        sorted_items = sorted(enumerate(items), 
                            key=lambda x: x[1]['value'] / x[1]['weight'], 
                            reverse=True)
        
        solution = []
        current_weight = 0
        current_value = 0
        
        for idx, item in sorted_items:
            if current_weight + item['weight'] <= capacity:
                solution.append(idx)
                current_weight += item['weight']
                current_value += item['value']
        
        # Affichage des r√©sultats
        greedy_text = f"""
üîç SOLUTION GLOUTONNE (Comparaison)
{'='*40}

M√©thode: Tri par ratio valeur/poids d√©croissant

R√©sultats:
‚Ä¢ Valeur totale: {current_value:.2f}
‚Ä¢ Nombre d'objets: {len(solution)}
‚Ä¢ Poids utilis√©: {current_weight:.1f}/{capacity}
‚Ä¢ Efficacit√©: {current_weight/capacity*100:.1f}%

Objets s√©lectionn√©s:
"""
        
        for idx in solution:
            item = items[idx]
            greedy_text += f"‚Ä¢ {item['name']} (Ratio: {item['value']/item['weight']:.2f})\n"
        
        greedy_text += f"\nCalcul√© instantan√©ment √† {datetime.now().strftime('%H:%M:%S')}\n"
        
        self.comparison_text.delete(1.0, tk.END)
        self.comparison_text.insert(tk.END, greedy_text)
        
        # Basculer vers l'onglet comparaisons
        self.notebook.select(2)

    def optimize_parameters(self):
        """Optimise automatiquement les param√®tres"""
        if not self.problem:
            messagebox.showwarning("Attention", "Veuillez d'abord charger un fichier de donn√©es")
            return
        
        messagebox.showinfo("Optimisation", "Fonctionnalit√© d'optimisation des param√®tres en d√©veloppement")

    def reset_parameters(self):
        """Remet les param√®tres aux valeurs par d√©faut"""
        self.params['alpha'].set(config.ALPHA)
        self.params['beta'].set(config.BETA)
        self.params['evaporation'].set(config.EVAPORATION)
        self.params['num_ants'].set(config.NUM_ANTS)
        self.params['iterations'].set(config.NUM_ITERATIONS)
        self.params['capacity'].set(config.KNAPSACK_CAPACITY)

    def clear_results(self):
        """Efface les r√©sultats affich√©s"""
        self.results_text.delete(1.0, tk.END)
        self.comparison_text.delete(1.0, tk.END)
        self.figure.clear()
        self.canvas.draw()

    def save_results(self):
        """Sauvegarde les r√©sultats dans un fichier"""
        content = self.results_text.get(1.0, tk.END)
        if not content.strip():
            messagebox.showwarning("Attention", "Aucun r√©sultat √† sauvegarder")
            return
        
        filename = filedialog.asksaveasfilename(
            title="Sauvegarder les r√©sultats",
            defaultextension=".txt",
            filetypes=[("Text files", "*.txt"), ("Tous les fichiers", "*.*")]
        )
        
        if filename:
            try:
                with open(filename, 'w', encoding='utf-8') as file:
                    file.write(content)
                messagebox.showinfo("Succ√®s", f"R√©sultats sauvegard√©s dans {filename}")
            except Exception as e:
                messagebox.showerror("Erreur", f"Impossible de sauvegarder:\n{str(e)}")

    def save_config(self):
        """Sauvegarde la configuration actuelle"""
        config_data = {
            'parameters': {
                'alpha': self.params['alpha'].get(),
                'beta': self.params['beta'].get(),
                'evaporation': self.params['evaporation'].get(),
                'num_ants': self.params['num_ants'].get(),
                'iterations': self.params['iterations'].get(),
                'capacity': self.params['capacity'].get()
            },
            'data_file': self.file_path_var.get(),
            'saved_at': datetime.now().isoformat()
        }
        
        filename = filedialog.asksaveasfilename(
            title="Sauvegarder la configuration",
            defaultextension=".json",
            filetypes=[("JSON files", "*.json"), ("Tous les fichiers", "*.*")]
        )
        
        if filename:
            try:
                with open(filename, 'w', encoding='utf-8') as file:
                    json.dump(config_data, file, indent=2, ensure_ascii=False)
                messagebox.showinfo("Succ√®s", f"Configuration sauvegard√©e dans {filename}")
            except Exception as e:
                messagebox.showerror("Erreur", f"Impossible de sauvegarder:\n{str(e)}")

    def load_config(self):
        """Charge une configuration depuis un fichier"""
        filename = filedialog.askopenfilename(
            title="Charger une configuration",
            filetypes=[("JSON files", "*.json"), ("Tous les fichiers", "*.*")]
        )
        
        if filename:
            try:
                with open(filename, 'r', encoding='utf-8') as file:
                    config_data = json.load(file)
                
                # Charger les param√®tres
                if 'parameters' in config_data:
                    params = config_data['parameters']
                    for key, value in params.items():
                        if key in self.params:
                            self.params[key].set(value)
                
                # Charger le fichier de donn√©es
                if 'data_file' in config_data:
                    self.file_path_var.set(config_data['data_file'])
                    self.load_problem()
                
                messagebox.showinfo("Succ√®s", "Configuration charg√©e avec succ√®s")
                
            except Exception as e:
                messagebox.showerror("Erreur", f"Impossible de charger la configuration:\n{str(e)}")

    def show_about(self):
        """Affiche la bo√Æte de dialogue √Ä propos"""
        about_text = """
üêú Optimisation du Sac √† Dos par Colonie de Fourmis

Version: 1.0
Auteur: Assistant IA Claude

Description:
Cette application utilise l'algorithme d'optimisation par colonie de fourmis (ACO) 
pour r√©soudre le probl√®me du sac √† dos. L'interface graphique permet de:

‚Ä¢ Charger des donn√©es depuis un fichier CSV
‚Ä¢ Configurer les param√®tres de l'algorithme
‚Ä¢ Visualiser la convergence en temps r√©el
‚Ä¢ Comparer avec l'algorithme glouton
‚Ä¢ Sauvegarder les r√©sultats et configurations

Algorithme ACO:
L'optimisation par colonie de fourmis s'inspire du comportement des fourmis 
qui trouvent le chemin le plus court vers la nourriture en d√©posant des 
ph√©romones. Dans ce contexte, les "fourmis" explorent l'espace des solutions 
possibles pour le sac √† dos.

Param√®tres:
‚Ä¢ Alpha (Œ±): Influence des ph√©romones
‚Ä¢ B√™ta (Œ≤): Influence de l'information heuristique
‚Ä¢ √âvaporation: Taux d'√©vaporation des ph√©romones
‚Ä¢ Nombre de fourmis: Taille de la colonie
‚Ä¢ It√©rations: Nombre de cycles d'optimisation

Format du fichier CSV:
Le fichier doit contenir les colonnes: name, weight, value
        """
        
        messagebox.showinfo("√Ä propos", about_text)

    def run_batch_optimization(self):
        """Ex√©cute plusieurs optimisations avec diff√©rents param√®tres"""
        if not self.problem:
            messagebox.showwarning("Attention", "Veuillez d'abord charger un fichier de donn√©es")
            return
        
        # Configuration pour les tests de param√®tres
        parameter_sets = [
            {'name': 'Exploitation', 'alpha': 2.0, 'beta': 1.0, 'evaporation': 0.3},
            {'name': 'Exploration', 'alpha': 0.5, 'beta': 3.0, 'evaporation': 0.7},
            {'name': '√âquilibr√©', 'alpha': 1.0, 'beta': 2.0, 'evaporation': 0.5},
            {'name': 'Intensif', 'alpha': 3.0, 'beta': 0.5, 'evaporation': 0.2}
        ]
        
        batch_results = "üî¨ ANALYSE COMPARATIVE DES PARAM√àTRES\n"
        batch_results += "="*60 + "\n\n"
        
        for param_set in parameter_sets:
            # Simuler l'optimisation avec ces param√®tres
            items = self.problem['items']
            capacity = self.params['capacity'].get()
            
            # Simulation simplifi√©e
            best_value = self._simulate_parameter_set(items, capacity, param_set)
            
            batch_results += f"Configuration: {param_set['name']}\n"
            batch_results += f"‚Ä¢ Alpha: {param_set['alpha']}, B√™ta: {param_set['beta']}, √âvaporation: {param_set['evaporation']}\n"
            batch_results += f"‚Ä¢ R√©sultat: {best_value:.2f}\n\n"
        
        # Afficher dans l'onglet comparaisons
        self.comparison_text.delete(1.0, tk.END)
        self.comparison_text.insert(tk.END, batch_results)
        self.notebook.select(2)

    def _simulate_parameter_set(self, items, capacity, param_set):
        """Simule l'optimisation avec un jeu de param√®tres donn√©"""
        # Simulation basique - dans un vrai ACO, cela serait plus complexe
        alpha = param_set['alpha']
        beta = param_set['beta']
        
        # Calcul d'un score bas√© sur les param√®tres
        base_score = sum(item['value'] for item in items if item['weight'] <= capacity)
        
        # Facteur d'ajustement bas√© sur les param√®tres
        adjustment = (alpha * 0.8 + beta * 0.6) / 3.0
        
        return base_score * adjustment * np.random.uniform(0.7, 1.0)

    def export_graph(self):
        """Exporte le graphique actuel"""
        if not hasattr(self, 'figure') or not self.figure.get_axes():
            messagebox.showwarning("Attention", "Aucun graphique √† exporter")
            return
        
        filename = filedialog.asksaveasfilename(
            title="Exporter le graphique",
            defaultextension=".png",
            filetypes=[
                ("PNG files", "*.png"),
                ("PDF files", "*.pdf"),
                ("SVG files", "*.svg"),
                ("Tous les fichiers", "*.*")
            ]
        )
        
        if filename:
            try:
                self.figure.savefig(filename, dpi=300, bbox_inches='tight')
                messagebox.showinfo("Succ√®s", f"Graphique export√© vers {filename}")
            except Exception as e:
                messagebox.showerror("Erreur", f"Impossible d'exporter:\n{str(e)}")

    def validate_parameters(self):
        """Valide les param√®tres avant l'ex√©cution"""
        errors = []
        
        if self.params['alpha'].get() <= 0:
            errors.append("Alpha doit √™tre positif")
        
        if self.params['beta'].get() <= 0:
            errors.append("B√™ta doit √™tre positif")
        
        if not (0 < self.params['evaporation'].get() < 1):
            errors.append("L'√©vaporation doit √™tre entre 0 et 1")
        
        if self.params['num_ants'].get() < 1:
            errors.append("Le nombre de fourmis doit √™tre au moins 1")
        
        if self.params['iterations'].get() < 1:
            errors.append("Le nombre d'it√©rations doit √™tre au moins 1")
        
        if self.params['capacity'].get() <= 0:
            errors.append("La capacit√© doit √™tre positive")
        
        if errors:
            messagebox.showerror("Param√®tres invalides", "\n".join(errors))
            return False
        
        return True

    def get_problem_statistics(self):
        """Calcule des statistiques sur le probl√®me"""
        if not self.problem:
            return None
        
        items = self.problem['items']
        weights = [item['weight'] for item in items]
        values = [item['value'] for item in items]
        ratios = [v/w for v, w in zip(values, weights)]
        
        stats = {
            'num_items': len(items),
            'total_weight': sum(weights),
            'total_value': sum(values),
            'avg_weight': np.mean(weights),
            'avg_value': np.mean(values),
            'avg_ratio': np.mean(ratios),
            'max_ratio': max(ratios),
            'min_ratio': min(ratios),
            'capacity_utilization': sum(weights) / self.params['capacity'].get()
        }
        
        return stats

    def show_problem_analysis(self):
        """Affiche une analyse d√©taill√©e du probl√®me"""
        stats = self.get_problem_statistics()
        if not stats:
            messagebox.showwarning("Attention", "Aucun probl√®me charg√©")
            return
        
        analysis_text = f"""
üìä ANALYSE DU PROBL√àME
{'='*40}

Statistiques g√©n√©rales:
‚Ä¢ Nombre d'objets: {stats['num_items']}
‚Ä¢ Poids total: {stats['total_weight']:.2f}
‚Ä¢ Valeur totale: {stats['total_value']:.2f}
‚Ä¢ Capacit√© du sac: {self.params['capacity'].get()}

Moyennes:
‚Ä¢ Poids moyen: {stats['avg_weight']:.2f}
‚Ä¢ Valeur moyenne: {stats['avg_value']:.2f}
‚Ä¢ Ratio V/P moyen: {stats['avg_ratio']:.2f}

Ratios valeur/poids:
‚Ä¢ Maximum: {stats['max_ratio']:.2f}
‚Ä¢ Minimum: {stats['min_ratio']:.2f}

Analyse de difficult√©:
‚Ä¢ Utilisation th√©orique: {stats['capacity_utilization']*100:.1f}%
"""
        
        if stats['capacity_utilization'] > 3:
            analysis_text += "‚Ä¢ Difficult√©: √âLEV√âE (beaucoup plus d'objets que de capacit√©)\n"
        elif stats['capacity_utilization'] > 1.5:
            analysis_text += "‚Ä¢ Difficult√©: MOYENNE (s√©lection n√©cessaire)\n"
        else:
            analysis_text += "‚Ä¢ Difficult√©: FAIBLE (la plupart des objets peuvent √™tre pris)\n"
        
        # Recommandations de param√®tres
        analysis_text += "\nüéØ RECOMMANDATIONS DE PARAM√àTRES:\n"
        
        if stats['capacity_utilization'] > 2:
            analysis_text += "‚Ä¢ Privil√©gier l'exploration (Œ≤ √©lev√©, √©vaporation √©lev√©e)\n"
            analysis_text += "‚Ä¢ Augmenter le nombre d'it√©rations\n"
        else:
            analysis_text += "‚Ä¢ √âquilibrer exploration/exploitation\n"
            analysis_text += "‚Ä¢ Param√®tres par d√©faut appropri√©s\n"
        
        self.comparison_text.delete(1.0, tk.END)
        self.comparison_text.insert(tk.END, analysis_text)
        self.notebook.select(2)

def main():
    """Fonction principale"""
    root = tk.Tk()
    app = ACOKnapsackGUI(root)
    
    # Gestionnaire de fermeture
    def on_closing():
        if app.is_running:
            if messagebox.askokcancel("Quitter", "Une optimisation est en cours. Voulez-vous vraiment quitter?"):
                app.stop_aco()
                root.destroy()
        else:
            root.destroy()
    
    root.protocol("WM_DELETE_WINDOW", on_closing)
    
    # Ajout de raccourcis clavier
    root.bind('<Control-o>', lambda e: app.browse_file())
    root.bind('<Control-s>', lambda e: app.save_results())
    root.bind('<Control-r>', lambda e: app.run_aco())
    root.bind('<F5>', lambda e: app.run_aco())
    root.bind('<Escape>', lambda e: app.stop_aco())
    
    root.mainloop()

if __name__ == "__main__":
    main()